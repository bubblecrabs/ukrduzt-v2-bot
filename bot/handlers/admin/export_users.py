import csv
import io
from datetime import datetime

from aiogram import F, Router
from aiogram.types import CallbackQuery, BufferedInputFile
from sqlalchemy.ext.asyncio import AsyncSession

from bot.filters.admin import AdminFilter
from bot.services.database.requests.users import get_users_count, get_users
from bot.utils.admin import get_username_bot

router = Router()


@router.callback_query(F.data == "export_users", AdminFilter())
async def export_users(call: CallbackQuery, session: AsyncSession) -> None:
    """Handles export of all users to a CSV file efficiently with a progress bar."""
    username_bot = await get_username_bot()

    total_users = await get_users_count(session)
    if total_users == 0:
        await call.message.answer(text="‚ö†Ô∏è *–£ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.*")
        return

    file_buffer = io.StringIO()
    writer = csv.writer(file_buffer)
    writer.writerow([
        "User ID", "Username", "Faculty", "Course", "Group", "Group Name", "Is Admin", "Created At"
    ])

    progress_message = await call.message.edit_text(text="üì§ *–ï–∫—Å–ø–æ—Ä—Ç –ø–æ—á–∞–≤—Å—è - 0%*")
    processed = 0
    last_progress = 0

    async for user in get_users(session):
        writer.writerow([
            user.user_id,
            user.username or "N/A",
            user.user_faculty or "N/A",
            user.user_course or "N/A",
            user.user_group or "N/A",
            user.user_group_name or "N/A",
            "Yes" if user.is_admin else "No",
            user.created_at.strftime('%d.%m.%Y %H:%M')
        ])

        processed += 1
        progress = (processed / total_users) * 100

        if int(progress) - last_progress >= 5:
            last_progress = int(progress)
            progress_bar = "‚ñ†" * (last_progress // 5) + "‚ñ°" * (20 - last_progress // 5)
            await progress_message.edit_text(
                text=(
                    f"üì§ *–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö - {last_progress}%*\n\n"
                    f"[{progress_bar}]"
                )
            )

    file_buffer.seek(0)
    filename = f"users_{username_bot}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"

    await progress_message.edit_text(text="‚úÖ *–ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É...*")

    await call.message.answer_document(
        document=BufferedInputFile(file_buffer.getvalue().encode("utf-8"), filename=filename),
        caption=(
            f"üìÇ *–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:* `@{username_bot}`\n"
            f"üïí *–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:* *{datetime.now().strftime('%d.%m.%Y %H:%M')}*"
        )
    )
